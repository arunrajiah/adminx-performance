name: WordPress Plugin CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: ['7.4', '8.0', '8.1', '8.2']
        wordpress-version: ['5.0', '5.5', '6.0', 'latest']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: gd, imagick, mysql, zip
          tools: composer, phpcs

      - name: Validate PHP syntax
        run: find . -name "*.php" -print0 | xargs -0 -n1 php -l

      - name: Install Composer dependencies
        run: |
          if [ -f composer.json ]; then
            composer install --no-dev --optimize-autoloader
          fi

      - name: Install WordPress Coding Standards
        run: |
          composer global require wp-coding-standards/wpcs
          composer global require phpcompatibility/phpcompatibility-wp
          composer global require dealerdirect/phpcodesniffer-composer-installer
          ~/.composer/vendor/bin/phpcs --config-set installed_paths ~/.composer/vendor/wp-coding-standards/wpcs,~/.composer/vendor/phpcompatibility/php-compatibility,~/.composer/vendor/phpcompatibility/phpcompatibility-paragonie,~/.composer/vendor/phpcompatibility/phpcompatibility-wp

      - name: Run WordPress coding standards
        run: ~/.composer/vendor/bin/phpcs --standard=WordPress --extensions=php --ignore=*/vendor/*,*/node_modules/* ./

      - name: Run PHP Compatibility checks
        run: ~/.composer/vendor/bin/phpcs --standard=PHPCompatibilityWP --runtime-set testVersion ${{ matrix.php-version }}- --extensions=php --ignore=*/vendor/*,*/node_modules/* ./

      - name: Set up WordPress test environment
        run: |
          # Install WordPress CLI
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp
          
          # Set up MySQL
          sudo systemctl start mysql.service
          mysql -e 'CREATE DATABASE wordpress_test;' -uroot -proot
          mysql -e "CREATE USER 'wp_test'@'localhost' IDENTIFIED BY 'wp_test';" -uroot -proot
          mysql -e "GRANT ALL PRIVILEGES ON wordpress_test.* TO 'wp_test'@'localhost';" -uroot -proot
          
          # Download and configure WordPress
          wp core download --version=${{ matrix.wordpress-version }} --path=/tmp/wordpress
          wp config create --dbname=wordpress_test --dbuser=wp_test --dbpass=wp_test --dbhost=localhost --path=/tmp/wordpress
          wp core install --url=http://localhost --title="Test Site" --admin_user=admin --admin_password=admin --admin_email=admin@example.com --path=/tmp/wordpress
          
          # Copy plugin to WordPress installation
          cp -r . /tmp/wordpress/wp-content/plugins/adminx-performance/

      - name: Activate plugin and run basic tests
        run: |
          cd /tmp/wordpress
          wp plugin activate adminx-performance
          wp plugin list
          
          # Test plugin activation
          if wp plugin is-active adminx-performance; then
            echo "Plugin activated successfully"
          else
            echo "Plugin activation failed"
            exit 1
          fi
          
          # Test basic functionality
          php -r "
          define('WP_USE_THEMES', false);
          require_once('./wp-load.php');
          
          // Test cache manager
          if (class_exists('AdminX_Performance_Cache_Manager')) {
            echo 'Cache Manager class exists\n';
          } else {
            echo 'Cache Manager class missing\n';
            exit(1);
          }
          
          // Test optimizer
          if (class_exists('AdminX_Performance_Optimizer')) {
            echo 'Optimizer class exists\n';
          } else {
            echo 'Optimizer class missing\n';
            exit(1);
          }
          
          // Test image optimizer
          if (class_exists('AdminX_Performance_Image_Optimizer')) {
            echo 'Image Optimizer class exists\n';
          } else {
            echo 'Image Optimizer class missing\n';
            exit(1);
          }
          
          // Test database optimizer
          if (class_exists('AdminX_Performance_DB_Optimizer')) {
            echo 'Database Optimizer class exists\n';
          } else {
            echo 'Database Optimizer class missing\n';
            exit(1);
          }
          
          echo 'All core classes loaded successfully\n';
          "

      - name: Run security scan
        run: |
          # Install security scanner
          curl -s https://api.github.com/repos/WordPress/security-checker/releases/latest \
          | grep "browser_download_url.*security-checker.phar" \
          | cut -d : -f 2,3 \
          | tr -d \" \
          | wget -qi -
          
          chmod +x security-checker.phar
          
          # Run security scan
          if [ -f composer.lock ]; then
            php security-checker.phar security:check composer.lock
          else
            echo "No composer.lock found, skipping security check"
          fi

      - name: Test file permissions and structure
        run: |
          # Check for proper file permissions
          find . -name "*.php" -perm /111 -exec echo "Executable PHP file found: {}" \;
          
          # Check for required files
          required_files=("adminx-performance.php" "readme.txt" "includes/class-cache-manager.php")
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Required file missing: $file"
              exit 1
            fi
          done
          
          # Check for sensitive files that shouldn't be included
          sensitive_files=(".env" ".git" "composer.json" "package.json")
          for file in "${sensitive_files[@]}"; do
            if [ -f "$file" ]; then
              echo "Sensitive file found in distribution: $file"
              # Don't exit for these, just warn
            fi
          done

      - name: Build plugin zip
        run: |
          mkdir -p build
          
          # Create clean copy for distribution
          rsync -av --exclude='.git*' \
                   --exclude='node_modules' \
                   --exclude='tests' \
                   --exclude='*.md' \
                   --exclude='package*.json' \
                   --exclude='composer.*' \
                   --exclude='.github' \
                   ./ build/adminx-performance/
          
          # Create zip file
          cd build
          zip -r adminx-performance.zip adminx-performance/
          
          # Verify zip contents
          unzip -l adminx-performance.zip

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: adminx-performance-php${{ matrix.php-version }}-wp${{ matrix.wordpress-version }}
          path: build/adminx-performance.zip
          retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/php

      - name: Check for hardcoded credentials
        run: |
          # Check for potential hardcoded passwords, API keys, etc.
          if grep -r -i "password\s*=" --include="*.php" .; then
            echo "Potential hardcoded passwords found"
            exit 1
          fi
          
          if grep -r -i "api_key\s*=" --include="*.php" .; then
            echo "Potential hardcoded API keys found"
            exit 1
          fi

  performance-test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: gd, imagick, mysql

      - name: Performance baseline test
        run: |
          # Simple performance test to ensure plugin doesn't cause major slowdowns
          php -d memory_limit=128M -r "
          \$start = microtime(true);
          \$memory_start = memory_get_usage();
          
          // Simulate plugin loading
          require_once('./adminx-performance.php');
          
          \$end = microtime(true);
          \$memory_end = memory_get_usage();
          
          \$load_time = (\$end - \$start) * 1000; // Convert to milliseconds
          \$memory_used = (\$memory_end - \$memory_start) / 1024; // Convert to KB
          
          echo \"Plugin load time: \" . round(\$load_time, 2) . \"ms\n\";
          echo \"Memory usage: \" . round(\$memory_used, 2) . \"KB\n\";
          
          // Fail if plugin takes too long to load or uses too much memory
          if (\$load_time > 100) {
            echo \"Plugin load time too high: \" . \$load_time . \"ms\n\";
            exit(1);
          }
          
          if (\$memory_used > 1024) {
            echo \"Plugin memory usage too high: \" . \$memory_used . \"KB\n\";
            exit(1);
          }
          
          echo \"Performance test passed\n\";
          "

  compatibility-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        wordpress-version: ['5.0', '5.5', '6.0', 'latest']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'

      - name: Test WordPress ${{ matrix.wordpress-version }} compatibility
        run: |
          echo "Testing compatibility with WordPress ${{ matrix.wordpress-version }}"
          
          # Download specific WordPress version
          curl -O https://wordpress.org/wordpress-${{ matrix.wordpress-version }}.tar.gz
          tar -xzf wordpress-${{ matrix.wordpress-version }}.tar.gz
          
          # Copy plugin files
          cp -r . wordpress/wp-content/plugins/adminx-performance/
          
          # Basic syntax check with WordPress loaded
          cd wordpress/wp-content/plugins/adminx-performance/
          php -l adminx-performance.php
          
          echo "WordPress ${{ matrix.wordpress-version }} compatibility test passed"

  release:
    runs-on: ubuntu-latest
    needs: [build, security-scan, performance-test, compatibility-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: adminx-performance-php8.1-wplatest
          path: ./artifacts

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: AdminX Performance ${{ github.ref }}
          body: |
            ## Changes in this Release
            - See CHANGELOG.md for detailed changes
            
            ## Installation
            1. Download the adminx-performance.zip file
            2. Upload to WordPress via Plugins → Add New → Upload Plugin
            3. Activate the plugin
            4. Configure settings under AdminX → Performance
          draft: false
          prerelease: false

      - name: Upload Release Asset
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/adminx-performance.zip
          asset_name: adminx-performance.zip
          asset_content_type: application/zip